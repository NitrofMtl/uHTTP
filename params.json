{"name":"Uhttp","tagline":"uHTTP by nomadnt modified to work with arduino DUE","body":"`// This file is part of uHTTP.\r\n//\r\n// uHTTP is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// uHTTP is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Nome-Programma.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n#ifndef uHTTP_H\r\n#define uHTTP_H\r\n\r\n#if (ARDUINO >= 100)\r\n    #include \"Arduino.h\"\r\n#else\r\n    #include \"WProgram.h\"\r\n#endif\r\n\r\n#include \"EthernetClient.h\"\r\n#include \"EthernetServer.h\"\r\n#include <SD.h>\r\n// #define uHTTP_DEBUG\r\n\r\n// Sizes\r\n#define uHTTP_BUFFER_SIZE    255\r\n#define uHTTP_METHOD_SIZE    8\r\n#define uHTTP_URI_SIZE       64\r\n#define uHTTP_QUERY_SIZE     64\r\n#define uHTTP_AUTH_SIZE      32\r\n#define uHTTP_TYPE_SIZE      34\r\n#define uHTTP_ORIG_SIZE      16\r\n// #define uHTTP_HOST_SIZE      32\r\n#define uHTTP_BODY_SIZE      255\r\n\r\n#define uHTTP_METHOD_OPTIONS 0\r\n#define uHTTP_METHOD_GET     1\r\n#define uHTTP_METHOD_HEAD    2\r\n#define uHTTP_METHOD_POST    3\r\n#define uHTTP_METHOD_PUT     4\r\n#define uHTTP_METHOD_PATCH   5\r\n#define uHTTP_METHOD_DELETE  6\r\n#define uHTTP_METHOD_TRACE   7\r\n#define uHTTP_METHOD_CONNECT 8\r\n\r\n\r\n#define TEXT_PLAIN  0\r\n#define TEXT_HTML   1\r\n#define TEXT_JS     2\r\n#define TEXT_CSS    3\r\n#define TEXT_XML    4\r\n#define TEXT_JSON   5\r\n\r\ntypedef struct header_t{\r\n    char type[uHTTP_TYPE_SIZE];\r\n    char auth[uHTTP_AUTH_SIZE];\r\n    char orig[uHTTP_ORIG_SIZE];\r\n    //char host[uHTTP_HOST_SIZE];\r\n    uint16_t length;\r\n};\r\n\r\nclass uHTTP : public EthernetServer {\r\n    private:\r\n\r\n\r\n        header_t __head;\r\n\r\n        uint8_t __method;\r\n\r\n        char *__uri;\r\n        char *__query;\r\n        char *__body;\r\n        const char *parse(const char *needle, char *haystack, const char*sep);\r\n       \r\n    public:\r\n        uHTTP();\r\n        uHTTP(uint16_t port);\r\n        ~uHTTP();\r\n\r\n        EthernetClient available();\r\n\r\n        header_t head();\r\n\r\n        uint8_t method();\r\n        bool method(uint8_t type);\r\n\r\n        const char *uri();\r\n        const char *uri(uint8_t segment);\r\n        bool uri(const char *uri);\r\n        bool uri(uint8_t index, const char *uri);\r\n        \r\n        const char *query();\r\n        const char *query(const char *key);\r\n\r\n        const char *body();\r\n        const char *data(const char *key);\r\n        void webFile_Post(char url[32], EthernetClient response);\r\n        void render(uint16_t code, uint8_t ctype , EthernetClient response);\r\n        void render(uint16_t code, const char *body, EthernetClient response);\r\n        void send_headers(uint16_t code , uint8_t ctype , EthernetClient response );\r\n        void send_headers(uint16_t code, EthernetClient response);\r\n        void send_body(const char *body, EthernetClient response);\r\n        void send_method_headers(const char *uri, EthernetClient response);\r\n\r\n        bool get_request(const char *uri, EthernetClient response);\r\n        bool put_request(const char *uri, EthernetClient response);\r\n\r\n        void post_JSON(String output, EthernetClient response);\r\n        void send_JSON_headers(EthernetClient response);\r\n\r\n};\r\n\r\n#endif`","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}