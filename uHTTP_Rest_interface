/**
   HTTP Parser
   Parse an HTTP request and print to serial the following values:

   method: the requested method (GET HEAD POST PUT PATCH DELETE OPTIONS)
   uri : the requested url
   data: the requested data if GET query string ? data if POST/PUT body data

   This example code is in the public domain.
 **/

#include <SPI.h>
#include <Ethernet.h>
#include <uHTTP.h>
#include <SD.h>

const char JSON_DIGITAL[] = "{\"id\": %u, \"pin\": %u, \"value\": %u, \"pwm\": %u}";
const char JSON_ANALOG[] = "{\"id\": %u, \"pin\": %u, \"value\": %u}";

struct output_t {
  uint8_t pin;
  uint8_t value;
  uint8_t pwm;
} output[8];

byte macaddr[6] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x66};
byte ip4addr[4] = {192, 168, 0, 110};

uHTTP *server = new uHTTP(80);
EthernetClient response;

void render(uint16_t code = 200, const char *body = 0);
//void render(uint16_t code = 200, const __FlashStringHelper *body = 0);

void setup() {
  Serial.begin(9600);

  Ethernet.begin(macaddr, ip4addr);

  Serial.print("Starting uHTTP at ");
  Serial.print(Ethernet.localIP());
  Serial.println(":80");

  server->begin();

  output[0] = {2, 0, 0};
  output[1] = {3, 0, 1};
  output[2] = {4, 0, 0};
  output[3] = {5, 0, 1};
  output[4] = {6, 0, 1};
  output[5] = {7, 0, 0};
  output[6] = {8, 0, 0};
  output[7] = {9, 0, 1};

  for (uint8_t i = 0; i < 8; i++) pinMode(output[i].pin, OUTPUT);
  for (uint8_t i = 0; i < 6; i++) pinMode(i, INPUT);

  Serial.println(output[7].pwm);

  printRoutes();
}

void loop() {
  if ((response = server->available())) {
    if (server->uri("/")) {
      server->send_method_headers((server->uri()), response);
    } else {
      if ( server->get_request("digital", response)) { // look up for a get request of key "digital"
        get_digitalProcess();
      }
      else if (server->put_request("digital", response)) { // look up for a put request of key "digital"
        put_digitalProcess();
      }
    }
  } else {
    server->send_headers(404, response);
  }
  response.stop();
}





void get_digitalProcess() { //buld a JSON char array and post it to client
  char buffer[64] = {0};
  uint8_t id = atoi(server->uri(2));

  uint8_t size = sizeof(output) / sizeof(output_t);
  server->send_headers(200, response);
  response.print("[");
  for (uint8_t i = 0; i < size; i++) {
    sprintf(buffer, JSON_DIGITAL, i + 1, output[i].pin, output[i].value, output[i].pwm);
    response.print(buffer);
    if (i < size - 1) response.print(", ");
  }
  response.println("]");
}

void put_digitalProcess() {//parse JSON request and apply it
  char buffer[64] = {0};
  uint8_t id = atoi(server->uri(2));

  if (id) {

    uint8_t value = atoi(server->data("value"));// find data over uri
    // parse and apply data
    if (output[id - 1].pwm) {
      output[id - 1].value = value;
      analogWrite(output[id - 1].pin, output[id - 1].value);
    } else {
      if (strcmp(server->data("value"), PSTR("HIGH") ) == 0)
        output[id - 1].value = 1;
      else if (strcmp(server->data("value"), PSTR("LOW") ) == 0)
        output[id - 1].value = 0;
      else if (value == 0 || value == 1)
        output[id - 1].value = value;
      digitalWrite(output[id - 1].pin, output[id - 1].value);
    }
  }
}


void printRoutes() {
  Serial.println(F("+---------------------------------------------------------+"));
  Serial.println(F("| METHOD | URI           | DESCRIPTION                    |"));
  Serial.println(F("+---------------------------------------------------------+"));
  Serial.println(F("| GET    | /digital/     | Return all digital pins status |"));
  Serial.println(F("| GET    | /digital/{id} | Return digital pin status      |"));
  Serial.println(F("| PUT    | /digital/{id} | Set digital pin status         |"));
  Serial.println(F("| GET    | /analog/      | Return all digital pins status |"));
  Serial.println(F("| GET    | /analog/{id}  | Return digital pin status      |"));
  Serial.println(F("| PUT    | /analog/{id}  | Set digital pin status         |"));
  Serial.println(F("+---------------------------------------------------------+"));
}
